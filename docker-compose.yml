version: '3.8'
services:
  mcp-server:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.9
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    env_file: .env
    volumes:
      - ./data:/app/data
    environment:
      - SQLITE_DB_PATH=/app/data/database.db
      - MAX_WORKERS=4
      - AIDER_PATH=${AIDER_PATH}
      - AIDER_API_KEY=${AIDER_API_KEY}
      - AIDER_USER=${AIDER_USER}
      - AIDER_PASSWORD=${AIDER_PASSWORD}
      - COOLIFY_PUBLIC_URL=${COOLIFY_PUBLIC_URL:-http://localhost:8000}
      - NODE_ENV=${NODE_ENV:-production}
    labels:
      - "coolify.managed=true"
      - "coolify.version=1.0.0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mcp-server

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  sqlite_data:
    name: ${COMPOSE_PROJECT_NAME:-mcp}_sqlite_data
